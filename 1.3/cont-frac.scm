(define (cont-frac n d k)
  (define (helper counter)
	(if (> counter k)
	  0
	  (/ (n counter) 
		 (+ (d counter) (helper (+ counter 1))))))
  (helper 1))

(define (cont-frac-iter n d k)
  (define (iter-helper result counter)
	(if (= counter 0)
	  result
	  (iter-helper (/ (n counter) (+ (d counter) result)) (- counter 1))))
  (iter-helper 0 k))

(define (check-precision k)
  (define (display-actual)
	(newline)
	(display "actual : ")
	(display (/ 1 (/ (+ 1 (sqrt 5)) 2))))
  (define (helper counter)
	(let ((val (cont-frac (lambda (i) 1.0)
						  (lambda (i) 1.0)
						  counter)))
	  (newline)
	  (display counter)
	  (display " : ")
	  (display val)
	  (if (= k counter)
		(display-actual)
		(helper (+ counter 1)))))
  (helper 1)
  )
